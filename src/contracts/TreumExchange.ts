/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace TreumOrder {
  export type TokenStruct = {
    kind: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenStructOutput = [number, string, BigNumber, BigNumber] & {
    kind: number;
    token: string;
    id: BigNumber;
    amount: BigNumber;
  };

  export type OrderStruct = {
    expiry: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    makerAddress: PromiseOrValue<string>;
    takerAddress: PromiseOrValue<string>;
    makerToken: TreumOrder.TokenStruct;
    takerToken: TreumOrder.TokenStruct;
    payoutTo: PromiseOrValue<string>[];
    payoutAmount: PromiseOrValue<BigNumberish>[];
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    TreumOrder.TokenStructOutput,
    TreumOrder.TokenStructOutput,
    string[],
    BigNumber[]
  ] & {
    expiry: BigNumber;
    nonce: BigNumber;
    makerAddress: string;
    takerAddress: string;
    makerToken: TreumOrder.TokenStructOutput;
    takerToken: TreumOrder.TokenStructOutput;
    payoutTo: string[];
    payoutAmount: BigNumber[];
  };
}

export interface TreumExchangeInterface extends utils.Interface {
  functions: {
    "cancel((uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]))": FunctionFragment;
    "cancelAllBefore(uint256)": FunctionFragment;
    "canceledOrders(bytes32)": FunctionFragment;
    "fill(uint256,(uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]),bytes)": FunctionFragment;
    "fillFor((uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]),bytes,bytes)": FunctionFragment;
    "fillWithNativeAsset(uint256,(uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]),bytes)": FunctionFragment;
    "filledAmount(bytes32)": FunctionFragment;
    "getOrderType((uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]))": FunctionFragment;
    "getTypedDataHash((uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]))": FunctionFragment;
    "hash((uint256,uint256,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),address[],uint256[]))": FunctionFragment;
    "invalidNonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWrappedAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wrappedAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancel"
      | "cancelAllBefore"
      | "canceledOrders"
      | "fill"
      | "fillFor"
      | "fillWithNativeAsset"
      | "filledAmount"
      | "getOrderType"
      | "getTypedDataHash"
      | "hash"
      | "invalidNonces"
      | "owner"
      | "renounceOwnership"
      | "setWrappedAddress"
      | "transferOwnership"
      | "wrappedAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [TreumOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllBefore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledOrders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [
      PromiseOrValue<BigNumberish>,
      TreumOrder.OrderStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillFor",
    values: [
      TreumOrder.OrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillWithNativeAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      TreumOrder.OrderStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderType",
    values: [TreumOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [TreumOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [TreumOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidNonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillWithNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAddress",
    data: BytesLike
  ): Result;

  events: {
    "Cancel(bytes32,address)": EventFragment;
    "CancelAllBefore(uint256,address)": EventFragment;
    "Fill(uint256,uint256,address,uint256,uint256,address,address,uint256,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payout(address,address[],address,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAllBefore"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
}

export interface CancelEventObject {
  orderHash: string;
  makerAddress: string;
}
export type CancelEvent = TypedEvent<[string, string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface CancelAllBeforeEventObject {
  timestamp: BigNumber;
  makerAddress: string;
}
export type CancelAllBeforeEvent = TypedEvent<
  [BigNumber, string],
  CancelAllBeforeEventObject
>;

export type CancelAllBeforeEventFilter = TypedEventFilter<CancelAllBeforeEvent>;

export interface FillEventObject {
  orderTimestamp: BigNumber;
  timestamp: BigNumber;
  taker: string;
  takerAmount: BigNumber;
  takerTokenId: BigNumber;
  takerToken: string;
  maker: string;
  makerAmount: BigNumber;
  makerId: BigNumber;
  makerToken: string;
  senderAddress: string;
}
export type FillEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  FillEventObject
>;

export type FillEventFilter = TypedEventFilter<FillEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayoutEventObject {
  from: string;
  to: string[];
  token: string;
  amount: BigNumber[];
  timestamp: BigNumber;
}
export type PayoutEvent = TypedEvent<
  [string, string[], string, BigNumber[], BigNumber],
  PayoutEventObject
>;

export type PayoutEventFilter = TypedEventFilter<PayoutEvent>;

export interface TreumExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreumExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      order: TreumOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAllBefore(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canceledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fill(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillFor(
      order: TreumOrder.OrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      takerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillWithNativeAsset(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    filledAmount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderType(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTypedDataHash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    invalidNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWrappedAddress(
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrappedAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  cancel(
    order: TreumOrder.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAllBefore(
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canceledOrders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fill(
    fillAmount: PromiseOrValue<BigNumberish>,
    order: TreumOrder.OrderStruct,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillFor(
    order: TreumOrder.OrderStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    takerSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillWithNativeAsset(
    fillAmount: PromiseOrValue<BigNumberish>,
    order: TreumOrder.OrderStruct,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  filledAmount(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderType(
    order: TreumOrder.OrderStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  getTypedDataHash(
    order: TreumOrder.OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hash(
    order: TreumOrder.OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  invalidNonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWrappedAddress(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrappedAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancel(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAllBefore(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    canceledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fill(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillFor(
      order: TreumOrder.OrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      takerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillWithNativeAsset(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    filledAmount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderType(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    getTypedDataHash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    invalidNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWrappedAddress(
      weth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Cancel(bytes32,address)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      makerAddress?: PromiseOrValue<string> | null
    ): CancelEventFilter;
    Cancel(
      orderHash?: PromiseOrValue<BytesLike> | null,
      makerAddress?: PromiseOrValue<string> | null
    ): CancelEventFilter;

    "CancelAllBefore(uint256,address)"(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      makerAddress?: PromiseOrValue<string> | null
    ): CancelAllBeforeEventFilter;
    CancelAllBefore(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      makerAddress?: PromiseOrValue<string> | null
    ): CancelAllBeforeEventFilter;

    "Fill(uint256,uint256,address,uint256,uint256,address,address,uint256,uint256,address,address)"(
      orderTimestamp?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      taker?: PromiseOrValue<string> | null,
      takerAmount?: null,
      takerTokenId?: null,
      takerToken?: null,
      maker?: PromiseOrValue<string> | null,
      makerAmount?: null,
      makerId?: null,
      makerToken?: null,
      senderAddress?: null
    ): FillEventFilter;
    Fill(
      orderTimestamp?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      taker?: PromiseOrValue<string> | null,
      takerAmount?: null,
      takerTokenId?: null,
      takerToken?: null,
      maker?: PromiseOrValue<string> | null,
      makerAmount?: null,
      makerId?: null,
      makerToken?: null,
      senderAddress?: null
    ): FillEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Payout(address,address[],address,uint256[],uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): PayoutEventFilter;
    Payout(
      from?: PromiseOrValue<string> | null,
      to?: null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): PayoutEventFilter;
  };

  estimateGas: {
    cancel(
      order: TreumOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAllBefore(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canceledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fill(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillFor(
      order: TreumOrder.OrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      takerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillWithNativeAsset(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    filledAmount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderType(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypedDataHash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWrappedAddress(
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrappedAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      order: TreumOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllBefore(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canceledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fill(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillFor(
      order: TreumOrder.OrderStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      takerSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillWithNativeAsset(
      fillAmount: PromiseOrValue<BigNumberish>,
      order: TreumOrder.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    filledAmount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderType(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedDataHash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      order: TreumOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedAddress(
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
